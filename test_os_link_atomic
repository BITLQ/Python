import socket
import struct
import os
import time
import argparse
import sys

GROUP_IP = '224.3.29.71'


def __client__(local_path, dest_path):
    server_addr = ('', 10000)
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(server_addr)
    addgroup = socket.inet_aton(GROUP_IP)
    mreq = struct.pack('4sL', addgroup, socket.INADDR_ANY)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
    sock.settimeout(60)
    try:
        while True:
            data, addr = sock.recvfrom(1024)
            try:
                os.link(local_path, dest_path)
            except:
                sock.sendto("False", addr)
            else:
                sock.sendto("True", addr)
    except socket.timeout:
        sock.close()
    finally:
        sock.close()


def __server__(dest_path, num, clients):
    group = (GROUP_IP, 10000)
    addrdress = ('', 10000)
    num = int(num)
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(addrdress)
    ttl = struct.pack('b', 1)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)
    sock.settimeout(4)
    times = 0
    sums = num
    sumsu = 0
    sumd = 0
    print('%25s|%8s|%8s|%8s|%8s' % (
        'address', 'cur', 'status', 'progress', 'error'))
    d1 = {}
    d2 = {}
    try:
        while num:
            sock.sendto("1", group)
            count = 0
            meantimes = 0
            meantimed = 0
            while True:
                # sum
                data, addr = sock.recvfrom(16)
                if data == "True":
                    d1[addr] = '1'
                    if addr in d2:
                        d2[addr] += 1
                    else:
                        d2[addr] = 1
                else:
                    d1[addr] = '0'
                    if addr not in d2:
                        d2[addr] = 0
                if data is not None:
                    count += 1
                if count == clients:
                    times += 1
                    break
            # test the same time success or default
            for key in d1:
                if d1[key] == '1':
                    meantimes += 1
                else:
                    meantimed += 1
            if meantimes == len(d1) and len(d1) != 1:
                sumsu += 1
            if meantimed == len(d1) and len(d1) != 1:
                sumd += 1
            if os.path.exists(dest_path):
                os.unlink(dest_path)
            for (key1, key2) in zip(d1, d2):
                print('%25s|%8s|%8s|%8s|%8s' % (
                    key1, d1[key1], d2[key2],
                    '%d/%d' % (times, sums),
                    '%d/%d' % (sumsu, sumd)))
                sys.stdout.flush()
            sys.stdout.flush()
            for i in range(len(d1)):
                print "\b\r",
            sys.stdout.flush()

            num -= 1
            time.sleep(0.5)
        #print all node success times
        sum = 0
        for key in d2:
            sum += d2[key]
        print "\n"
        print '                                               '\
            '        sum = %5d times' % sum
    except socket.timeout:
        print "socket timeout!!!"
    except:
        print "Server codeing fault or The keyboard interrupt!!!"
    finally:
        sock.close()


def _read_mounts():
    with open('/proc/self/mountinfo', 'r') as f:
        out = f.read()
    lines = out.split('\n')
    mounts = {}
    for line in lines:
        tokens = line.split()
        if len(tokens) == 11:
            device = tokens[9]
            mnt_point = tokens[4]
            mounts[mnt_point] = device
    return mounts


def __mainfunc__():
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--CS", help="mothod select")
    parser.add_argument("-ms", "--mount_srcpath", help="nfs export")
    parser.add_argument("-md", "--mount_destpath", help="the mount point")
    parser.add_argument("-fs", "--srcfilename", help="os_link_srcfilename")
    parser.add_argument("-fd", "--destfilename", help="os_link_destfilename")
    parser.add_argument("-t", "--times", help="test times", type=int)
    parser.add_argument("-c", "--clients", help="the number of client",
                        type=int)

    args = parser.parse_args()
    if args.mount_destpath not in _read_mounts():
        os.system("mount.nfs -o noatime,nodiratime,nolock %s %s"
                  % (args.mount_srcpath, args.mount_destpath))
    if args.CS == "S":
        __server__(args.destfilename, args.times, args.clients)
    elif args.CS == "C":
        if not os.path.exists(args.srcfilename):
            os.mknod(args.srcfilename)
        __client__(args.srcfilename, args.destfilename)
    else:
        print args.CS


if __name__ == '__main__':
    __mainfunc__()
